# generate json files about data from different sources
# Then create pdf from it

from reportlab.pdfgen import canvas
from reportlab.graphics.charts.piecharts import Pie
import logging
from reportlab.lib.enums import TA_JUSTIFY
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, mm
from reportlab.platypus import *
from reportlab.rl_config import defaultPageSize
from reportlab.lib.colors import HexColor
from datetime import date

from gather_info import *


fields = []
styles = getSampleStyleSheet()
ParaStyle = styles["Normal"]
WIDTH = defaultPageSize[0]
HEIGHT = defaultPageSize[1]


#CommonData adds page number and header to every page at the footer on bottom right corner
class CommonData(canvas.Canvas):
    def __init__(self, *args, **kwargs):
        canvas.Canvas.__init__(self, *args, **kwargs)
        self._saved_page_states = []

    def showPage(self):
        self._saved_page_states.append(dict(self.__dict__))
        self._startPage()

    def save(self):
        """add page info to each page (page x of y)"""
        num_pages = len(self._saved_page_states)
        for state in self._saved_page_states:
            self.__dict__.update(state)
            self.draw_page_number(num_pages)
            self.add_logo()
            self.drawString(5, HEIGHT-20, "VSS - Security Overview Report")
            canvas.Canvas.showPage(self)
        canvas.Canvas.save(self)

    def draw_page_number(self, page_count):
        self.setFont("Helvetica", 7)
        self.drawRightString(200*mm, 20*mm,
            "Page %d of %d" % (self._pageNumber, page_count))
    
    def add_logo(self):
        self.drawImage("images/vmware_logo.jpg", 20*mm, 20*mm, width=1.5*inch, height=0.24*inch)


# Add VSS image on the first page. Cna be replaced with custom image by providing the file in same location.
# Try to use a ".jpeg" image
def on_first_page(canvas, doc):
    canvas.saveState()
    canvas.drawImage("images/vss.jpeg", 20*mm, HEIGHT-150,width=6.5*inch, height=1.06*inch)
    canvas.setFont('Times-Bold', 20)
    canvas.drawCentredString(WIDTH/2.0, HEIGHT - 350, "Organizational Security Overview Report")
    canvas.setFont('Times-Roman', 14)
    company = get_org_name()
    canvas.drawCentredString(WIDTH/2.0, HEIGHT/2.0-(100), "For: " + company)
    canvas.setFillColor(HexColor("#696969"))
    canvas.setFont('Times-Roman', 12)
    today = date.today()
    today_formatted = today.strftime("%b-%d-%Y")
    canvas.drawCentredString(WIDTH/2.0, HEIGHT/2.0-(120), "Generated On: " + today_formatted)
    canvas.restoreState()
        
def add_para(txt, doc, style=ParaStyle, klass=Paragraph, sep=0.1):
    s = Spacer(0, sep*inch)
    para = klass(txt, style)
    sect = [s, para]
    result = KeepTogether(sect)
    return result


# Adds Exectuive summary section
def add_executive_summary_section(document):
    
    fields.append(Paragraph("Executive Summary", style=styles["Heading1"]))
    fields.append(Paragraph("1. Introduction", style=styles["Heading3"]))
    account_info = get_account_info()
    text = '''This report contains cloud configuration security assessment results from the of ''' + str(account_info["accounts"]) + ''' cloud accounts across your environment. 
    The cloud environment was evaluated across ''' + str(account_info["rules"]) + ''' rules associated with ''' + str(account_info["compliance_frameworks"]) + ''' compliance frameworks. 
    There were ''' + str(account_info["total_violations"]) + ''' violations found.<br/><br/> 
    
    This analysis provides summaries and breakdowns to help address the risk identified, along with change comparison since last evaluation. 
    The findings are generated by comprehensive evaluation through a revolutionary inter-connected security model that identifies in-depth configuration problems.'''
    
    info = add_para(text, document)
    fields.append(info)

def add_scope_section(document):
    fields.append(Paragraph("2. Scope", style=styles["Heading3"]))
    config = get_config()
    
    text = '''
    The scope of this report is within the context of the following filters:<br/>
    Provider: 		AWS, Azure<br/>
    Cloud Accounts: All 	(472 accounts)<br/>
    Frameworks: 	All 	(9 frameworks)<br/>
    Severity: 		High<br/>
    Cloud Tag: 		All<br/>
    Environment:	All<br/>
    '''
    info = add_para(text, document)
    fields.append(info)
    

# Creates the initial report document
def init_report():
    doc = SimpleDocTemplate("vss_compliance_report.pdf", pagesize=A4)
    return doc

def build_report(document):
    logging.info("Generating Report Now...")
    document.build(fields, onFirstPage=on_first_page, canvasmaker=CommonData)

if __name__ == '__main__':
    logging.getLogger().setLevel(logging.INFO)
    logging.info("Generating Report ...")
    doc = init_report()
    fields.append(PageBreak())
    add_executive_summary_section(doc)
    add_scope_section(doc)
    fields.append(PageBreak())
    build_report(doc)
   
   